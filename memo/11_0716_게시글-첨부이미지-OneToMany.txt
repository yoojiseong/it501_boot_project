@OneToMany
예) 게시글 1 : 댓글 N,
자바 버전에서는 방향성이 있다.
주체에따라서, 연관관계 설정이 달라진다.

댓글 입장에서 , @ManyToOne
기존의 데이터베이스 FK 를 설정하는 것과 동일함.
단방향으로 만 설정이 되어 있음.

게시글 1: 첨부 이미지들 : N
상위 엔티티 기준으로 연관관계를 설정.
게시글 입장, @OneToMany

장점.
- 상위에서 영속성(1차 캐시테이블), 게시글 삭제시,
하위 이미지들이 같이 삭제되거나,
- 위에서 아래 방향으로 작업이 조금 더 익숙하다.
- 분리해서 작업을 할수 있어서, 부가적인 설정하기가 편하다.
cascade 설정, 고아 객체 처리, N+1, 최적화등.

단점.
양방향으로 연관관계 설정에 대한 기초 지식이 필요함.


확인사항,
양방향이 됨.
게시글 입장 : @OneToMany
이미지들 입장 : @ManyToOne
게시글 1: 이미지들 N

JPA, 중간 테이블을 만들어줌. : board_image_set
예시
Hibernate:
    create table board (
        bno bigint not null auto_increment,
        mod_date datetime(6),
        reg_date datetime(6),
        writer varchar(50) not null,
        title varchar(500) not null,
        content varchar(2000) not null,
        primary key (bno)
    ) engine=InnoDB
Hibernate:
    create table board_image_set ( // 중간 테이블
        board_bno bigint not null,
        image_set_uuid varchar(255) not null,
        primary key (board_bno, image_set_uuid)
    ) engine=InnoDB
Hibernate:
    create table board_image (
        ord integer not null,
        board_bno bigint,
        file_name varchar(255),
        uuid varchar(255) not null,
        primary key (uuid)
    ) engine=InnoDB
=========================


연관관계 주인 설정.
자바, 데이터베이스와 다르게, 방향이 있어요.
누가 주체적으로 일을 할거냐?
mappedBy

메모,
만약, 중간 테이블을 이용하지 않고 설정하는 방법
- @OneToMany 부분에서, @JoinColumn 설정
- mappedBy 설정을 하면됨.
예시 테이블 구조,
create table board ( //1
        bno bigint not null auto_increment,
        mod_date datetime(6),
        reg_date datetime(6),
        writer varchar(50) not null,
        title varchar(500) not null,
        content varchar(2000) not null,
        primary key (bno)
    ) engine=InnoDB
Hibernate:
    create table board_image ( //N
        ord integer not null,
        board_bno bigint,
        file_name varchar(255),
        uuid varchar(255) not null,
        primary key (uuid)
    ) engine=InnoDB
==========================================

영속성 상태 관련 내용
- PERSIST, REMOVE : 상위 엔티티가 처리될때(영속되다)
하위 엔티티도 처리가 됨.
- MERGE, REFRESH, DETACH : 상위 엔티티가 처리될때(영속되다)
하위 엔티티도 상태가 변경.
- ALL : 상위 엔티티가 처리될때(영속되다) 하위 엔티티도 적용이 됨

1차 캐시 테이블 , 실제 테이블 , 동기화 놀이


지연로딩 ->
보드, 보드의 이미지들이  join 처리가 되어 있음.
1: N , 양방향,

지연로딩을 하더래도, 한 번에 조인을 처리해서 select가 이루어 지는 설정.
@EntityGraph


N+1 문제 발생,
1 : board 관련 select 조회,
N : 하나의 board 에대한, 각각 boardImage 들 또 select 함.
예시)
조회를 해요.
부모게시글, 1번 게시글 , 첨부 이미지 5장-> 게시글 1번 조회, 첨부이미지 : 5번 조회
부모게시글, 2번 게시글 , 첨부 이미지 7장-> 게시글 1번 조회, 첨부이미지 : 7번 조회
부모게시글, 3번 게시글 , 첨부 이미지 8장-> 게시글 1번 조회, 첨부이미지 : 8번 조회
:
:
부모게시글, 100번 게시글 , 첨부 이미지 N장-> 게시글 1번 조회, 첨부이미지 : N번 조회

해결책
옵션, 모아서 처리해줘, @BatchSize = 20
부모게시글, 100번 게시글 , 첨부 이미지 100장-> 게시글 1번 조회, 첨부이미지 : 100번 조회
해결
부모게시글, 100번 게시글 , 첨부 이미지 100장-> 게시글 1번 조회, 첨부이미지 : 20씩 나눠서 조회
부모게시글, 100번 게시글 , 첨부 이미지 100장-> 게시글 1번 조회, 첨부이미지 : 20씩 나눠서 조회
부모게시글, 100번 게시글 , 첨부 이미지 100장-> 게시글 1번 조회, 첨부이미지 : 20씩 나눠서 조회
부모게시글, 100번 게시글 , 첨부 이미지 100장-> 게시글 1번 조회, 첨부이미지 : 20씩 나눠서 조회
부모게시글, 100번 게시글 , 첨부 이미지 100장-> 게시글 1번 조회, 첨부이미지 : 20씩 나눠서 조회
: 모아서 처리 해줄게. IN 연산자를 이용해서, 한번에 지정한 갯수만큼씩만
조회를 할게, 매번 귀찮게 안할게.

해결책
@BatchSize , 어노테이션 이용해서,
데이터베이스를 매번 실행해서, 많이 사용함. 자원 소모 심함.
지정한 크기만큼만 쿼리를 모아서 한번에 실행하기.

예시)
Hibernate:
    select
        is1_0.board_bno,
        is1_0.uuid,
        is1_0.file_name,
        is1_0.ord
    from
        board_image is1_0
    where
        is1_0.board_bno in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)


DTO <-> Entity 형변환 단계 ,
2단계 , 3단계 비교,

2단계,
Entity -> DTO 조회 하자마자, 바로 변환 하면 어떨까?
JPQLQuery<BoardListReplyCountDTO> dtoQuery =
                query.select(Projections.bean(BoardListReplyCountDTO.class,
                        board.bno,
                        board.title,
                        board.content,
                        board.writer,
                        board.regDate,
                        reply.count().as("replyCount")));

3단계
Entity -> DTO 조회, 바로 변환.
 // 3단계, 튜플 이용해서, 데이터 형변환.
        JPQLQuery<Tuple> tupleJPQLQuery = boardJPQLQuery.select(
                // 게시글, 댓글의 갯수를 조회한 결과,
                board,reply.countDistinct()
        );
        // 튜플에서, 각 데이터를 꺼내서, 형변환 작업,
        // 꺼내는 형식이 조금 다름. 맵과 비슷

        // tupleList, 튜플의 타입으로 조인된 테이블의 내용이 담겨 있음.
        List<Tuple> tupleList = tupleJPQLQuery.fetch();

        // 형변환 작업, 디비에서 조회 후 바로, DTO로 변환 작업,
        List<BoardListAllDTO> dtoList =
                tupleList.stream().map(tuple -> {
                    // 디비에서 조회된 내용임.
                    Board board1 = (Board)tuple.get(board);
                    long replyCount = tuple.get(1, Long.class);
                    // DTO로 형변환 하는 코드,
                    BoardListAllDTO dto = BoardListAllDTO.builder()
                            .bno(board1.getBno())
                            .title(board1.getTitle())
                            .writer(board1.getWriter())
                            .regDate(board1.getRegDate())
                            .replyCount(replyCount)
                            .build();
                    return dto;
                }).collect(Collectors.toList());