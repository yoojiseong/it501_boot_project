엔티티 클래스 => 테이블

1. @Id -> pk 로 사용이됨.
2. 클래스를 생성하면, 스프링이 실행시, 데이터베이스에 DDL 로써 바로 반영.
(조건, ddl-auto= none, create, create-drop. validate, update,)

3. 애너테이션을 이용해서, 테이블 만들 때, 컬럼들의 조건, 조인, 연관관계 매핑.

기존에 개념상, VO(Value Object) 클래스 대신에 , Entity Class 가 자리 매김.
영향력이 커짐, 테이블도 직접 생성함.

엔티티 클래스에서, 자동번호 증가 정책 옵션
  // pk 숫자를 자동 증가를 어떤 방식으로 하겠니?
  해당 마리아 디비에서 사용하는 증가 번호 정책을 이용하겠습니다.

1  보통은, 해당 디비의 정책을 준수한다.
  @GeneratedValue(strategy= GenerationType.IDENTITY)
: 각각의 데이터베이스에 존재하는 증가 정책을 이용

2 strategy= GenerationType.AUTO
: 부트가 알아서 자동으로 설정. (방언, 사투리, 기존 표준 SQL 외의 데이터베이스를 가리킬 때 사용. )

3 strategy= GenerationType.SEQUENCE
: 오라클 적용, 시퀀스 순서 테이블을 만들어서, 따로 작용.

4 strategy= GenerationType.TABLE
: 테이블을 만들어서 사용함.



엔티티 클래스에서, 공통으로 사용하는 , 등록시간, 수정시간 이용시.
추상 클래스에서 auditing 추가 기능 리스너 이용시.
메인 메서드에서, 애너테이션 활성화가 필요.
예시
@EnableJpaAuditing
public class Boot501Application {

추상 클래스에서 이용시에는 사용하겠다라는 의미로
@EntityListeners(value = {AuditingEntityListener.class})

결과는, board 테이블에서, 2개의 필드가 추가됨.



테이블 생성시,
각 컬럼에 조건을 설정.
예) varchar2 (2000) not null
default
unique

엔티티 클래스 -> 테이블에 반영.
쿼리 메서드 이용해서, 기본 crud 확인 했음.


페이징 관련, 부트에서는 페이징 관련 인터페이스를 따로 만들어서
좀 더 쉽게 구현 가능함.
페이징 준비물)
1) 페이지
2) 한 페이징당 보여줄 갯수
3) 전체 갯수
4) 디비에서 나눠진 목록

Pageable 인터페이스 이용. -> 리턴 타입 : Page 타입을 반환 받음.
페이징 준비물 도구 : PageRequest
예시)
PageRequest.of(페이지번호, 사이즈크기, 정렬기준)
PageRequest.of(0, 10, 오름,내림)



쿼리 메소드 단점,
예시) 제목, 키워드, 검색시, 게시글 번호 bno 역순 정렬해서 조회하는 방법
Page<Board> TitlfindByeContainingOrderByBnoDesc(String keyword, Pageable pageable);
결론, 복잡한 쿼리 작성에는 부적합, 간단한 쿼리 사용시 이용함.

쿼리 메소드 보완 -> 연장, @Query ,
조금 더 데이터베이스 언어에 가까운 구문을 사용.
JPQL, 언어를 이용해서, 디비에 명령을 한다.

예시)
@Query("select b from Board db where b.title like concat
('%':keyowrd,'%')")
단점, 문자열 내부에, 문법 검사가 안됨.
Page<Board> findKeyword(String keyword, Pageable pageable)

표준 SQL 구문이라서,
오라클, 마리아디비, 관계형 데이터베이스 구문을 이용.
!
JPA, ORM 기술을 사용하는 이유 -> 특정 데이터베이스 종속되지 않기 위해서.
예시)
이상용 개발자, 프로젝트 , 설계 때 사용하는 디비 : 오라클 ,
작업중, 갑자기 요청하는 곳에서, 디비 변경을 의뢰함.
마리아 디비로 변경해주세요.
!
부트 사용중. -> 엔티티 클래스 -> JPARepository , -> 디비만 교체하는 상황.

@Query 어노테이션을 이용해서, 각 디비 맞는 sql  구문을 이용해야함.
특정의 디비의 기능을 이용하는 건 좋다. 하지만, 정적으로 작성이 되어서 변경이 힘들네.
-> 동적으로 변경하면 어떨까?
@Query -> 문자열이라서, 변경이 안됨.
select * from board b where b.name = #{id}

@Query 단점,
예시) 다양한 검색 조건으로 sql 문장을 만든다고하면,
검색, 필터 여러가지 조건을 이용해서, 작업한다면,
해당 조건들마다, 각각의 정적인(고정) sql 다 만들어야함,

QueryDSL -> 자바 문법으로 SQL을 이용한다.
-> 동적으로 개발이 가능하고,(값이 바뀔때마다 새로고침 느낌)
-> 자바 빌더 패턴 형식으로 작성하니,
-> 컴파일러의 문법 검사 기능의 도움을 받을수 있음.
-> 타입의 안정성 고려하고
-> 다른 타 백엔드 기술과도 연동하기 쉽게 만든 프로젝트
예시)
설치 후, 간단한 메서드 작성시 보여주기.
public Page<Board> search(Pageable pageable) {
    // Querydsl 이용하는 기본 문법
    QBoard board = QBoard.board;
    // select from board 하는 것과 비슷한 기능.
    // query -> sql 관련 문장을, 자바 문법으로 표현하고 있다.
    JPQLQuery<Board> query = from(board);

    //BooleanBuilder를 이용한 조건절 추가 해보기.
    BooleanBuilder booleanBuilder = new BooleanBuilder();
    booleanBuilder.or(board.title.contains("1"));
    booleanBuilder.or(board.content.contains("1"));

    // where 조건절  where title like
//    query.where(board.title.contains("1"));
    // BooleanBuilder를 적용하기.
    query.where(booleanBuilder);
    // bno > 0 보다 큰 조건 넣을 경우
    query.where(board.bno.gt(0L));


    // 페이징 처리 적용하기.
    this.getQuerydsl().applyPagination(pageable, query);

    // 해당 조건에 맞는 데이터 가져오기
    List<Board> list = query.fetch();
    // 해당 조건에 맞는 데이터 갯수
    long count = query.fetchCount();
    return null;

Querydsl 이용해보기.
도구를 설치.
build.gradle 찾고 설치, 버전 의 변경이 발생해서, 5버전을 기준으로 할 예정.

// https://mvnrepository.com/artifact/com.querydsl/querydsl-jpa
implementation group: 'com.querydsl', name: 'querydsl-jpa', version: '5.0.0'

 implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"


     annotationProcessor(
             "jakarta.persistence:jakarta.persistence-api",
             "jakarta.annotation:jakarta.annotation-api",
             "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

    // 프로젝트 빌드 폴더에 소스 파일등을 자동으로 변경하는 코드.
    sourceSets {
        main {
            java {
                srcDirs = ["$projectDir/src/main/java","$projectDir/build/generated"]
            }
        }
    }

 설정 확인 방법.
 오른쪽 메뉴 그래들 -> other -> compileJava -> 왼쪽 프로젝트 폴더 구조
 -> build 폴더 생기고 -> 안쪽에 접두 Q 가 붙은 클래스가 생성이 되며 정상 동작.



Querydsl , 기존의 Repository 를 연동시 주의사항,

1) Querydsl을 이용해서 인터페이스 선언
2) 인터페이스 이름 + Impl 이라는 이름을 붙여서 작성.
QuerydslRepositorySupport 를 구현하기.
3) 기존 Repository 에 부모 인터페이스로 Querydsl을 위한 인터페이스 지정.


기본 사용하는 문법 방식 예제

// Querydsl 이용하는 기본 문법
    QBoard board = QBoard.board;
    // select from board 하는 것과 비슷한 기능.
    // query -> sql 관련 문장을, 자바 문법으로 표현하고 있다.
    JPQLQuery<Board> query = from(board);
    // where 조건절  where title like
    query.where(board.title.contains("1"));

    // 페이징 처리 적용하기.
    this.getQuerydsl().applyPagination(pageable,query);

    // 해당 조건에 맞는 데이터 가져오기
    List<Board> list = query.fetch();
    // 해당 조건에 맞는 데이터 갯수
    long count = query.fetchCount();



옵션
BooleanBuilder 이용해보기.
예시) 제목, 내용, 검색어(키워드) 존재하고(and),
bno > 0 보다 큰 데이터를 찾는 경우.

데이터베이스 로 사용한다면
select * from board
where
(
title like concat('%','1','%')
 or
content like concat('%','1','%')
or
keyword like concat('%','1','%')
)
and bno >0
order by bno desc;

and bno >0
Querydsl 버전으로 이용할 때, BooleanBuilder 패턴을 이용하면 쉽게
구현이 가능하다.











